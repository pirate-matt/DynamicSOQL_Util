/*
 * @author pirate-matt
 * @date   March, 2016
 *
 * @description  Utility class that has some convenient utility methods when dealing with dynamic SOQL
 * */
public class DynamicSOQL_Util {




    // ---- Select Formation Methods ----
    // (the more complex uses of dynamic soql involve transforming lists/sets of strings into select statements)


    /*
     * @description  Convenience method that accepts a set of strings rather than a list.
     *               See "DynamicSOQL_Util.formSelectClause(List<String>)" for more details.
     * */
    Static public String formSelectClause(Set<String> fieldNames) {
        return DynamicSOQL_Util.formSelectClause(new List<String>(fieldNames));
    }

    /*
     * @description  Convenience method that prepends the "SELECT " before the comma-separated field names.
     *               See "DynamicSOQL_Util.prepFieldNamesForSelectClause" for more details.
     * */
    Static public String formSelectClause(List<String> fieldNames) {
        return 'SELECT ' + DynamicSOQL_Util.prepFieldNamesForSelectClause(fieldNames);
    }

    /*
     * @description  Method is extracted so it can be used independently of the Select Clause formation methods if developer so desires.  Accepts
     *               a Set of Strings rather than a list see "DynamicSOQL_Util.prepFieldNamesForSelectClause(List<String>)" for more details.
     * */
    Static public String prepFieldNamesForSelectClause(Set<String> fieldNames) {
        return DynamicSOQL_Util.prepFieldNamesForSelectClause(new List<String>(fieldNames));
    }

    /*
     * @description  Method is extracted so it can be used independently of the Select Clause formation methods if developer so
     *               desires.  It simply takes the collection of field names and turns them into a single comma-separated string.
     * */
    Static public String prepFieldNamesForSelectClause(List<String> fieldNames) {
        return String.join(fieldNames, ',');
    }




    // ---- Encode Methods -----
    // (these methods return properly encoded strings for the various data types)


    /*
     * @description  Returns a string in the appropriate format to include in a dynamic soql query for a datetime object
     * */
    Static public String encode(Datetime providedDatetime) {
        return providedDatetime.format('yyyy-MM-dd\'T\'hh:mm:ss\'Z\'');
        //return providedDatetime.format('yyyy-MM-dd\'T\'HH:mm:ss.SSS\'Z\'');
    }

    /*
     * @description  Accepts Datetime objects, and returns an encoded string for only the Date infomration.
     * */
    Static public STring encodeAsDate(Datetime providedDatetime) {
        return providedDatetime.format('yyyy-MM-dd');
    }

    /*
     * @description  Encodes a Date object, but because of built in formatting for Datetimes, this method instantiates a representative Datetime
     *               object, and calls the "DynamicSOQL_Util.encodeAsDate(Datetime)" method.  (See its description for more details.)
     * */
    Static public String encode(Date providedDate) {
        return DynamicSOQL_Util.encodeAsDate(Datetime.newInstance(providedDate, Time.newInstance(0, 0, 0, 0)));
    }

    /*
     * @description  Accepts Date objects, and returns an encoded string for a representative datetime object.  NOTE representative datetime object
     *               is considered of the same date at the very start of the day 00:00:00.  See "DynamicSOQL_Util.encode(Datetime)" for more details.
     * */
    Static public String encodeAsDatetime(Date providedDate) {
        return DynamicSOQL_Util.encode(Datetime.newInstance(providedDate, Time.newInstance(0, 0, 0, 0)));
    }

}
