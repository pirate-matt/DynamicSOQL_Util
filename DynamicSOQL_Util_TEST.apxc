/*
 * @author pirate-matt
 * @date   March, 2016
 *
 * @description  Test class for similarly named utilty class
 * */

@isTest
public class DynamicSOQL_Util_TEST {


    Static testMethod void testStringEncodes() {
        List<String> emptyList = new List<String>();
        Set<String>  emptySet  = new Set<String>();

        List<String> knownList = new List<String>{'Name', 'CreatedDate', 'OwnerId'};
        Set<String>  knownSet  = new Set<String> {'Name', 'CreatedDate', 'OwnerId'};

        String expectedSelectClauseStart = 'SELECT ';
        String expectedFieldNameString   = 'Name,CreatedDate,OwnerId';

        Test.startTest();
        // Test empty collections
        System.assertEquals('', DynamicSOQL_Util.prepFieldNamesForSelectClause(emptyList));
        System.assertEquals('', DynamicSOQL_Util.prepFieldNamesForSelectClause(emptySet) );
        System.assertEquals(expectedSelectClauseStart, DynamicSOQL_Util.formSelectClause(emptyList));
        System.assertEquals(expectedSelectClauseStart, DynamicSOQL_Util.formSelectClause(emptySet) );

        // Test non empty collections
        System.assertEquals(expectedFieldNameString, DynamicSOQL_Util.prepFieldNamesForSelectClause(knownList));
        System.assertEquals(expectedFieldNameString, DynamicSOQL_Util.prepFieldNamesForSelectClause(knownSet) );
        System.assertEquals(expectedSelectClauseStart + expectedFieldNameString, DynamicSOQL_Util.formSelectClause(knownList));
        System.assertEquals(expectedSelectClauseStart + expectedFieldNameString, DynamicSOQL_Util.formSelectClause(knownSet) );
        Test.stopTest();
    }




    Static  testMethod void testDatetimeEncodes() {
        Datetime before_insertion = Datetime.now();
        Date knownDate = Date.newInstance(2016, 3, 14);

        Contact knownContact = new Contact(
            LastName = 'known',
            BirthDate = knownDate
        );
        insert knownContact;

        // Fetch from database to get a known Datetime (CreatedDate)
        knownContact = [SELECT Id, BirthDate, CreatedDate
                        FROM Contact
                        WHERE Id = :knownContact.Id
                        LIMIT 1];

        Datetime knownDatetime = knownContact.CreatedDate;

        String baseClause = 'SELECT Id, BirthDate, CreatedDate  FROM Contact  ';

        Test.startTest();
        Contact foundByDate = Database.query(baseClause + 'WHERE BirthDate = ' + DynamicSOQL_Util.encode(knownDate) + ' LIMIT 1');
        System.assertNotEquals(null, foundByDate, 'Should have been able to locate contact by encoded Date');

        Contact foundByDatetime = Database.query(baseClause + ' WHERE CreatedDate >= ' + DynamicSOQL_Util.encode(before_insertion) + ' LIMIT 1');
        System.assertNotEquals(null, foundByDatetime, 'Should have been able to locate contact by encoded Datetime "now"');
        System.assertEquals(knownDatetime, foundByDatetime.CreatedDate, 'Found CreatedDate should have matched known datetime');

        Contact foundByDateEncodedAsDatetime = Database.query(baseClause + ' WHERE CreatedDate >= ' + DynamicSOQL_Util.encodeAsDatetime(Date.today()) + ' LIMIT 1');
        System.assertNotEquals(null, foundByDateEncodedAsDatetime, 'Should have been able to locate contact by Date encoded for Datetime field (CreatedDate)');
        Test.stopTest();
    }
}
